<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar eventos</title>
    <link rel="stylesheet" href="../../../css/shorthandsCss/editar-eventosCss/editar-eventos.css">
</head>
<body>
    <div id="div-pai">
        <header>
            <h1 class="titulo">Gerência</h1>
            <a href="/homepage">
                <div id="header-image">
                </div>
            </a>
            <h1 class="titulo">Eventos</h1>
        </header>

        <h1 class="titulo">Edite seu Evento</h1>

        <% eventsData.forEach(event => { %>
            <form id="editEventForm" action="/uploadEvents" method="post" enctype="multipart/form-data">
                <input type="hidden" name="id" value="<%= event.id %>">

                <label for="nome">Editar nome:</label>
                <input type="text" name="nome" id="inome" data-original="<%= event.nome %>" placeholder="<%= event.nome %>" value="<%= event.nome %>">

                
                <label for="tipo">Editar tipo:</label>
                <select name="tipo" id="itipo"> 
                    <option value="<%= event.tipo %>" selected data-original="<%= event.tipo %>"><%= event.tipo %></option>        
                    <option value="Privado">Privado</option>
                    <option value="Público">Público</option>
                </select>

                
                <label for="organizador">Editar organizador:</label>
                <input type="text" name="organizador" id="iorganizador" value="<%= event.organizador %>" placeholder="<%= event.organizador %>" data-original="<%= event.organizador %>">

                
                <label for="data">Editar data:</label>
                <input type="date" name="data" id="idata" value="<%= event.data %>" data-original="<%= event.data %>">

                
                <label for="hora_inicio">Editar hora de início:</label>
                <input type="time" name="hora_inicio" id="ihora_inicio" value="<%= event.hora_inicio %>" data-original="<%= event.hora_inicio %>">

                
                <label for="hora_fim">Editar hora de fim:</label>
                <input type="time" name="hora_fim" id="ihora_fim" value="<%= event.hora_fim %>" data-original="<%= event.hora_fim %>">

                
                <label for="endereco">Editar endereço:</label>
                <input type="text" name="endereco" id="iendereco" data-original="<%= event.endereco %>" placeholder="<%= event.endereco %>" value="<%= event.endereco %>">

                
                <fieldset>
                    <legend>DESCRIÇÃO</legend>
                    <p id="p-textarea">*até 600 caracteres</p>
                    <textarea name="descricao" id="idescricao" required data-original="<%= event.descricao %>">
                    <%= event.descricao %>
                    </textarea>
                </fieldset>

                
                <label for="image">Editar imagem:</label>            
                <img src="data:image/jpeg;base64,<%= event.image.toString('base64') %>" alt="Imagem do evento" style="width: 200px; height: auto;">
                <input type="file" name="image" id="iimage">

                <button id="btt-evento">Salvar alterações</button>
            </form>


            <form action="/deleteEvents" method="post" id="eventDelete">
                <h1 class="titulo">Deletar evento:</h1>       
                <input type="hidden" name="id" value="<%= event.id %>">     
                <button class="btt-delete-account">DELETE</button>
            </form>
        <% }) %>
    </div>
</body>

<script defer>
    form.addEventListener('submit', (e) => {
    e.preventDefault(); // Impede o envio padrão

    const formData = new FormData(form); // Dados do formulário
    const alteredData = {};

    // Detecta mudanças nos campos
    form.querySelectorAll('input, textarea').forEach(field => {
        if (field.type !== 'file' && field.value !== field.getAttribute('data-original')) {
            alteredData[field.name] = field.value;
        }
    });

    // Verifica se o campo de imagem contém arquivo
    const imageField = form.querySelector('#iimage');
    if (imageField.files.length > 0) {
        formData.append('image', imageField.files[0]);
    }

    // Adiciona o ID do evento ao FormData
    const eventId = form.querySelector('input[name="id"]').value; // Recupera o ID do evento
    formData.append('id', eventId);  // Passa o ID no corpo da requisição

    // Envia os dados com fetch
    fetch(form.action, {
        method: 'PUT',
        body: formData, // Inclui arquivos e outros dados
    })
    .then(response => {
        if (response.ok) {
            alert('Alterações salvas com sucesso!');
        } else {
            alert('Erro ao salvar alterações.');
        }
    }).catch(err => {
        console.error('Error at requisition event update:', err);
    });
    });



    document.addEventListener('DOMContentLoaded', () => {
    const formDelete = document.getElementById('eventDelete'); // Obtém o formulário de exclusão
        if (formDelete) {
            formDelete.addEventListener('submit', function (event) {
                event.preventDefault(); // Evita o envio automático do formulário

                const userResponse = window.confirm('Tem certeza que deseja excluir esse evento?');
                if (userResponse) {
                    // Envia o formulário após a confirmação
                    this.submit();
                } else {
                    alert('Ação cancelada');
                }
            });
        }
    });

      

</script>

</html>